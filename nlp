from tkinter import *
import os
import tkinter as tk
from tkinter import ttk
from tkinter.scrolledtext import *
import tkinter.filedialog
import time
import random
timestr = time.strftime("%Y%m%d-%H%M%S")
from tkinter.font import Font
import warnings

#Web scrapping package
from bs4 import BeautifulSoup
from urllib.request import urlopen

#speech processing
import pyttsx3
import speech_recognition as sr
import datetime
import wikipedia
import webbrowser
import os
import random
import smtplib
import sys
import requests

engine=pyttsx3.init('sapi5')
voices=engine.getProperty('voices')
engine.setProperty('voice',voices[0].id)

def speak(audio):
    engine.say(audio)
    engine.runAndWait()

import re
import nltk
from nltk.tokenize import word_tokenize,sent_tokenize
from nltk.corpus import stopwords 
#removing stop-words and counting the word frequency

def nltk_summarizer(raw_text):
    stopWords=set(stopwords.words("english"))
    word_frequencies={}
    for word in nltk.word_tokenize(raw_text):
        if word not in stopWords:
            if word not in word_frequencies.keys():
                word_frequencies[word]=1
            else:
                word_frequencies[word]+=1
   

    max_frequency_word=max(word_frequencies.values())                   #calculate weighted frequency
    for word in word_frequencies.keys():
         word_frequencies[word]=(word_frequencies[word]/max_frequency_word)

    sentence_list =nltk.sent_tokenize(raw_text)
    sentence_scores={}
    for sentence in sentence_list:                                  #create sentence score with each weighted frequency
      for word in nltk.word_tokenize(sentence.lower()):
        if word in word_frequencies.keys():
            if (len(sentence.split(' ')))<30:
                if sentence not in sentence_scores.keys():
                    sentence_scores[sentence]=word_frequencies[word]
                else:
                    sentence_scores[sentence]+=word_frequencies[word] 

    import heapq                                                     #importing heapq and generating summary
    summary=heapq.nlargest(5,sentence_scores,key=sentence_scores.get)
    return(summary)
# Designing window for registration
 
def register():
    global register_screen
    register_screen = Toplevel(main_screen)
    register_screen.title("Register")
    register_screen.geometry("300x250")
 
    global username
    global password
    global username_entry
    global password_entry
    username = StringVar()
    password = StringVar()
 
    Label(register_screen, text="Please enter details below", bg="blue").pack()
    Label(register_screen, text="").pack()
    username_lable = Label(register_screen, text="Username * ")
    username_lable.pack()
    username_entry = Entry(register_screen, textvariable=username)
    username_entry.pack()
    password_lable = Label(register_screen, text="Password * ")
    password_lable.pack()
    password_entry = Entry(register_screen, textvariable=password, show='*')
    password_entry.pack()
    Label(register_screen, text="").pack()
    Button(register_screen, text="Register", width=10, height=1, bg="blue", command = register_user).pack()
    Label(register_screen,text="").pack()
    Button(register_screen,text="LOGIN", height="2", width="30", command=login).pack()
 
 
# Designing window for login 
 
def login():
    global login_screen
    login_screen = Toplevel(main_screen)
    login_screen.title("Login")
    login_screen.geometry("300x250")
    Label(login_screen, text="Please enter details below to login").pack()
    Label(login_screen, text="").pack()
 
    global username_verify
    global password_verify
 
    username_verify = StringVar()
    password_verify = StringVar()
 
    global username_login_entry
    global password_login_entry
 
    Label(login_screen, text="Username * ").pack()
    username_login_entry = Entry(login_screen, textvariable=username_verify)
    username_login_entry.pack()
    Label(login_screen, text="").pack()
    Label(login_screen, text="Password * ").pack()
    password_login_entry = Entry(login_screen, textvariable=password_verify, show= '*')
    password_login_entry.pack()
    Label(login_screen, text="").pack()
    Button(login_screen, text="Login", width=10, height=1, command = login_verify).pack()
 
def thanks():
    speak("welcome sir hope to see you soon again")
    global thank_screen
    thank_screen=Toplevel(main_screen)
    Height=300
    Width=250

    canvas=Canvas(thank_screen,width=Width, height=Height)
    thank_screen.title("Graphic")
    canvas.pack()
    

#ball=canvas.create_oval(0,0,100,100,fill='red')
    text = canvas.create_text(90,150,fill='red', font='Helvetica 24 bold', text='WELCOME')
    xspeed=10
    yspeed=0
    count=0
    while True:
             canvas.move(text,xspeed,yspeed)
             pos=canvas.coords(text)#[left,top,right,buttom]
             if pos[0]>=150:
                 xspeed=-xspeed
                 count+=1
             elif pos[0]==90:
                 xspeed=5
                 count+=1
             
                
             thank_screen.update()
             time.sleep(0.1)
             
             if count==2:
                
                main_screen.destroy()
    
# Implementing event on register button
 
def register_user():
 
    username_info = username.get()
    password_info = password.get()
 
    file = open(username_info, "w")
    file.write(username_info + "\n")
    file.write(password_info)
    file.close()
 
    username_entry.delete(0, END)
    password_entry.delete(0, END)
 
    Label(register_screen, text="Registration Success", fg="green", font=("calibri", 11)).pack()
 
# Implementing event on login button 
 
def login_verify():
    username1 = username_verify.get()
    password1 = password_verify.get()
    username_login_entry.delete(0, END)
    password_login_entry.delete(0, END)
 
    list_of_files = os.listdir()
    if username1 in list_of_files:
        file1 = open(username1, "r")
        verify = file1.read().splitlines()
        if password1 in verify:
            speak("welcome to the project")
            login_sucess()
 
        else:
            password_not_recognised()
 
    else:
        user_not_found()
 
# Designing popup for login success
 
def login_sucess():
    global window
    window = Toplevel(login_screen)
    window.title("summarizer")
    window.geometry('700x500')



#Style
    style = ttk.Style(window)
    style.configure('lefttab.TNotebook',tabposition='wn')
#Tabs
    tab_control = ttk.Notebook(window,style='lefttab.TNotebook')

    tab1 = ttk.Frame(tab_control)
    tab2 = ttk.Frame(tab_control)
    tab3 = ttk.Frame(tab_control)
    tab4 = ttk.Frame(tab_control)
    tab5 = ttk.Frame(tab_control)
    tab6 = ttk.Frame(tab_control)
    tab7 = ttk.Frame(tab_control)
    tab8 = ttk.Frame(tab_control)
    tab9 = ttk.Frame(tab_control)

#add tabs to notebook
    tab_control.add(tab1,text=f' {"Home":^20s}')
    tab_control.add(tab2,text=f' {"File":^20s}')
    tab_control.add(tab3,text=f' {"URL":^20s}')
    tab_control.add(tab4,text=f' {"News":^20s}')
    tab_control.add(tab5,text=f' {"Identify Language":^20s}')
    tab_control.add(tab6,text=f' {"Part of Speech":^20s}')               
    tab_control.add(tab7,text=f' {"About":^20s}')
    tab_control.add(tab8,text=f' {"HELP ASSISTANT":^20s}')            
    tab_control.add(tab9,text=f' {"EXIT":^20s}')

#Labels
    my_font=Font(family="Times New Roman",weight="bold",slant="italic")
    label1 = Label(tab1,text='Summarizer',padx=5,pady=5,font=my_font)
    label1.grid(column=0,row=0)         
    label1 = Label(tab2,text='File Processing',padx=5,pady=5,font=my_font)
    label1.grid(column=0,row=0)
    label1 = Label(tab3,text='URL',padx=5,pady=5,font=my_font) 
    label1.grid(column=0,row=0)    
    label1 = Label(tab4,text='News Processing',padx=5,pady=5,font=my_font)
    label1.grid(column=0,row=0)  
    label1 = Label(tab5,text='Identify the language',padx=5,pady=5,font=my_font)
    label1.grid(column=0,row=0)  
    label1 = Label(tab6,text='Part of Speech',padx=5,pady=5,font=my_font)
    label1.grid(column=0,row=0)  
    label1 = Label(tab7,text='About ',padx=5,pady=5,font=my_font)
    label1.grid(column=0,row=0)  
    label1 = Label(tab8,text='WELCOME TO OUR VOICE ASSISTANT',padx=5,pady=5,font=my_font)
    label1.grid(column=0,row=0)  
    label1 = Label(tab9,text='Hope to see you again',padx=5,pady=5,font=my_font)
    label1.grid(column=0,row=0)  
                
    tab_control.pack(expand=1,fill='both')  

#Functions
    def get_summary():
        raw_text=entry.get('1.0',tk.END)
        final_text=nltk_summarizer(raw_text)
        print(final_text)
        result = '\nSummary: {}'.format(final_text)
        tab1_display.insert(tk.END,result)
        speak("text is summarized")

#SAVE functions
    def save_summary():
        raw_text = entry.get('1.0',tk.END)
        final_text = str(nltk_summarizer(raw_text))
        file_name = 'yoursummary' + timestr + '.txt'
        with open(file_name,'w') as f:
                f.write(final_text)
        result = '\nName of File: {} , \nSummary: {}'.format(file_name,final_text)
        tab1_display.insert(tk.END,result)
        speak("the summary is saved")
#Clear Functions
    def clear_text():
        entry.delete('1.0',END)
        speak("the text is cleared")        
    def clear_display_result():
        tab1_display.delete('1.0',END)
        speak("the dispay screen of result is cleared")
                 
                
#Main Home Tab
    l1 = Label(tab1,text='Enter text to Summarize',padx=5,pady=5)
    l1.grid(row=1,column=0)
    entry=ScrolledText(tab1,height=10)
    entry.grid(row=2,column=0,columnspan=2,pady=5,padx=5)

#Buttons
    button1 = Button(tab1,text='Reset',command=clear_text,width=12,bg='#25d366',fg='#fff')
    button1.grid(row=4,column=0,pady=10,padx=10 )
                
    button2 = Button(tab1,text='Summarize',command=get_summary,width=12,bg='#25d366',fg='#fff')
    button2.grid(row=4,column=1,pady=10,padx=10 )
                
    button3 = Button(tab1,text='Clear Result',command=clear_display_result,width=12,bg='#25d366',fg='#fff')
    button3.grid(row=5,column=0,pady=10,padx=10 )
                
    button4 = Button(tab1,text='Save',command=save_summary,width=12,bg='#25d366',fg='#fff')
    button4.grid(row=5,column=1,pady=10,padx=10 )
                
#Displaying Screen for Result
    tab1_display=ScrolledText(tab1,height=10)
    tab1_display.grid(row=7,column=0,columnspan=3,padx=5,pady=5)                


#File Processing Tab

    def openfiles():
        file1 = tkinter.filedialog.askopenfilename(filetype=(('Text Files',".txt"),("All files","*")))
        read_text = open(file1).read()
        displayed_file.insert(tk.END,read_text)
        speak("the file is selected")

    def clear_text_file():
        displayed_file.delete('1.0',END)
        speak("the text screen is cleared")
                
    def clear_text_result():
        tab2_display_text.delete('1.0',END)
        speak("the display screen is cleared")
                
    def get_file_summary():
        raw_text=displayed_file.get('1.0',tk.END)
        final_text=nltk_summarizer(raw_text)
        
        result = '\nSummary: {}'.format(final_text)
        tab2_display_text.insert(tk.END,result)
        speak("the text of the file is summarized")
                
    l1 = Label(tab2,text='Open file to summarize')
    l1.grid(row=1,column=1)
    displayed_file=ScrolledText(tab2,height=7)
    displayed_file.grid(row=2,column=0,columnspan=3,pady=5,padx=3)

#Buttons
    b0 = Button(tab2,text='Open file',command=openfiles,width=12,bg='#25d366',fg='#fff')
    b0.grid(row=3,column=0,pady=10,padx=10 )
                
    b1= Button(tab2,text='Summarize',command=get_file_summary,width=12,bg='#25d366',fg='#fff')
    b1.grid(row=3,column=1,pady=10,padx=10 )
                
    b2= Button(tab2,text='Reset',command=clear_text_file,width=12,bg='#25d366',fg='#fff')
    b2.grid(row=3,column=2,pady=10,padx=10 )
                
    b3= Button(tab2,text='Clear Result',command=clear_text_result,width=12,bg='#25d366',fg='#fff')
    b3.grid(row=5,column=1,pady=10,padx=10 )
                
    b4=Button(tab2,text='Close',width=12,command=window.destroy)
    b4.grid(row=5,column=2,padx=10,pady=10)
                
#Display Screen
    tab2_display_text = ScrolledText(tab2,height=10)
    tab2_display_text.grid(row=7,column=0,columnspan=3,padx=5,pady=5)

#Allows you to edit
    tab2_display_text.config(state=NORMAL )
                
                
#URL TAB
                
    def get_text():
     raw_text=str(url_entry.get())
     page=urlopen(raw_text)
     soup=BeautifulSoup(page,'lxml')
     fetched_text=' '.join(map(lambda p:p.text,  soup.find_all('p')))
     url_display.insert(tk.END,fetched_text)
     speak("the text has been received from website")
                
    def save_url_summary():
     raw_text =url_display.get('1.0',tk.END)
     final_text=nltk_summarizer(raw_text)
     result='\nSummary: {}'.format(final_text)
     tab3_display_text.insert(tk.END,result)
     speak("summarized")
    def clear_url_entry():
     url_entry.delete(0,END)
     speak("Url entry is cleared")

    def clear_url_display():
     tab3_display_text.delete('1.0',END)
     speak("display screen is cleared")
     
    l1=Label(tab3,text="Enter URL to summarize")
    l1.grid(row=1,column=0)
                
    raw_entry=StringVar()
    url_entry=Entry(tab3,textvariable=raw_entry,width=50)
    url_entry.grid(row=1,column=1)
                
#Buttons
    button1 = Button(tab3,text='Reset',command=clear_url_entry,width=12,bg='#25d366',fg='#fff')
    button1.grid(row=4,column=0,pady=10,padx=10 )
                
    button2 = Button(tab3,text='Get Text',command=get_text,width=12,bg='#25d366',fg='#fff')
    button2.grid(row=4,column=1,pady=10,padx=10 )
                
    button3 = Button(tab3,text='Clear Result',command=clear_url_display,width=12,bg='#25d366',fg='#fff')
    button3.grid(row=5,column=0,pady=10,padx=10 )
                
    button4 = Button(tab3,text='Summarize',command=save_url_summary,width=12,bg='#25d366',fg='#fff')
    button4.grid(row=5,column=1,pady=10,padx=10 )
    
#Displaying Screen for Result
    url_display = ScrolledText(tab3,height=10)
    url_display.grid(row=7,column=0,columnspan=3,padx=5,pady=5)
                
    tab3_display_text = ScrolledText(tab3,height=10)
    tab3_display_text.grid(row=10,column=0,columnspan=3,padx=5,pady=5)
                

                
#News
    from textblob import TextBlob
    import nltk
    from newspaper import Article
                
    def get_text():
     raw_text=str(url_entry2.get())
     article=Article(raw_text)
     article.download()
     article.parse()
     article.nlp()            
     url_display2.insert(tk.END,article.text)
     speak("text has been taken using article module")
                
    def save_url_summary():
     raw_text=str(url_entry2.get())
     article=Article(raw_text)
     article.download()
     article.parse()
     article.nlp()            
     tab4_display_text.insert(tk.END,article.summary)
     speak("summary saved using article module")
     

    def sentiments():
     raw_text=str(url_entry2.get())
     article=Article(raw_text)
     article.download()
     article.parse()
     article.nlp()            
     text=article.summary
     obj=TextBlob(text)

     sentiment=obj.sentiment.polarity
     sentiment2=obj.sentiment.subjectivity
    
     if sentiment==0:
            attitude='neutral'
            speak("neutral sentiment")
     elif sentiment>0:
            attitude='positive'
            speak("positive sentiment")
            
     else:
            attitude='negative'
            speak("negative sentiment")
            
     tab4_sentiment.insert(tk.END,attitude)           
                
   
    def clear_url_entry():
     url_entry2.delete(0,END)
     speak("url cleared")
    def clear_url_display():
     tab4_display_text.delete('1.0',END)
                    
     
    l1=Label(tab4,text="Enter News URL to summarize")
    l1.grid(row=1,column=0)
                
    raw_entry2=StringVar()
    url_entry2=Entry(tab4,textvariable=raw_entry2,width=50)
    url_entry2.grid(row=1,column=1)
                
#Buttons
    button1 = Button(tab4,text='Reset',command=clear_url_entry,width=12,bg='#25d366',fg='#fff')
    button1.grid(row=4,column=0,pady=10,padx=10 )
                
    button2 = Button(tab4,text='Get Text',command=get_text,width=12,bg='#25d366',fg='#fff')
    button2.grid(row=4,column=1,pady=10,padx=10 )
                
    button3 = Button(tab4,text='Clear Result',command=clear_url_display,width=12,bg='#25d366',fg='#fff')
    button3.grid(row=5,column=0,pady=10,padx=10 )
                
    button4 = Button(tab4,text='Summarize',command=save_url_summary,width=12,bg='#25d366',fg='#fff')
    button4.grid(row=5,column=1,pady=10,padx=10 )

    button4 = Button(tab4,text='Sentiment',command=sentiments,width=12,bg='#25d366',fg='#fff')
    button4.grid(row=6,column=0,pady=10,padx=10 )
    
#Displaying Screen for Result
    url_display2 = ScrolledText(tab4,height=10)
    url_display2.grid(row=7,column=0,columnspan=3,padx=5,pady=5)
                
    tab4_display_text = ScrolledText(tab4,height=10)
    tab4_display_text.grid(row=10,column=0,columnspan=3,padx=5,pady=5)
                
    tab4_sentiment=Text(tab4,height=5)
    tab4_sentiment.grid(row=15,column=0,columnspan=5,padx=5,pady=5)
                
                
#Identify the language
    def clear_text5():
        entry5.delete('1.0',END)
                
    def clear_display_result5():
        tab5_display.delete('1.0',END)
                
    def clear_conversion():
        tab5_display2.delete('1.0',END)

    def get_language():
        raw_text5=entry5.get('1.0',tk.END)
        word=TextBlob(raw_text5)
        a=word.detect_language()
        tab5_display.insert(tk.END,a)
        speak("the language has been found")
    def convert():
        raw_text5=entry5.get('1.0',tk.END)
        word=TextBlob(raw_text5)
        a=word.translate(to='en')
        tab5_display2.insert(tk.END,a)
        speak("the language has been changed")
               
                
    l1 = Label(tab5,text='Enter text to identify the language',padx=5,pady=5)
    l1.grid(row=1,column=0)
    entry5=ScrolledText(tab5,height=10)
    entry5.grid(row=2,column=0,columnspan=2,pady=5,padx=5)

#Buttons
    button1 = Button(tab5,text='Reset',command=clear_text5,width=12,bg='#25d366',fg='#fff')
    button1.grid(row=4,column=0,pady=10,padx=10 )
                
    button2 = Button(tab5,text='Identify the language',command=get_language,width=15,bg='#25d366',fg='#fff')
    button2.grid(row=4,column=1,pady=10,padx=10 )
                
    button3 = Button(tab5,text='Clear Result',command=clear_display_result5,width=12,bg='#25d366',fg='#fff')
    button3.grid(row=5,column=0,pady=10,padx=10 )
                
    button5 = Button(tab5,text='Clear conversion',command=clear_conversion,width=15,bg='#25d366',fg='#fff')
    button5.grid(row=6,column=0,pady=10,padx=10 )
                
    button4 = Button(tab5,text='Convert to english',command=convert,width=15,bg='#25d366',fg='#fff')
    button4.grid(row=5,column=1,pady=10,padx=10 )
                
    tab5_display=Text(tab5,height=2)
    tab5_display.grid(row=8,column=0,columnspan=3,padx=5,pady=5) 
                
    tab5_display2=ScrolledText(tab5,height=10)
    tab5_display2.grid(row=10,column=0,columnspan=2,padx=5,pady=5)                

                
#POS Tagging
    def POS():
        raw_text6=entry6.get('1.0',tk.END)
        tokens = nltk.word_tokenize(raw_text6.lower())
        raw_text = nltk.Text(tokens)
        tags = nltk.pos_tag(raw_text)
        tab6_display.insert(tk.END,tags)
        speak("POS TAGGING DONE")
                
    def word():
        raw_text6=entry6.get('1.0',tk.END)
        tokens = nltk.word_tokenize(raw_text6.lower())
        raw_text = nltk.Text(tokens)
        tags = nltk.pos_tag(raw_text)
        length=len(tags)
        tab6_display2.insert(tk.END,length)
        speak("number of words are")
        speak(length)
                
    def clear():
        entry6.delete('1.0',END)
                
    def clear_output():
        tab6_display.delete('1.0',END)
                
    def clear2():
        tab6_display2.delete('1.0',END)
                
    l1 = Label(tab6,text='Enter text for POS Tagging',padx=5,pady=5)
    l1.grid(row=1,column=0)
    entry6=ScrolledText(tab6,height=10)
    entry6.grid(row=2,column=0,columnspan=2,pady=5,padx=5)

#Buttons
    button1 = Button(tab6,text='POS Tagging',command=POS,width=12,bg='#25d366',fg='#fff')
    button1.grid(row=4,column=0,pady=10,padx=10 )
                
    button2 = Button(tab6,text='NUMBER OF WORDS',command=word,width=15,bg='#25d366',fg='#fff')
    button2.grid(row=5,column=0,pady=10,padx=10 )
                
    button3 = Button(tab6,text='Clear Text',command=clear,width=15,bg='#25d366',fg='#fff')
    button3.grid(row=4,column=1,pady=10,padx=10 )
                
    button4= Button(tab6,text='Clear Result',command=clear_output,width=15,bg='#25d366',fg='#fff')
    button4.grid(row=5,column=1,pady=10,padx=10 )
                
    button5= Button(tab6,text='Clear number of words',command=clear2,width=15,bg='#25d366',fg='#fff')
    button5.grid(row=6,column=1,pady=10,padx=10 )

    tab6_display2=Text(tab6,height=2)
    tab6_display2.grid(row=10,column=0,columnspan=2,padx=5,pady=5) 
                
    tab6_display=ScrolledText(tab6,height=10)
    tab6_display.grid(row=12,column=0,columnspan=2,padx=5,pady=5) 

                
#About
    my_font=Font(family="Times New Roman",weight="bold",slant="italic")
    l1=Label(tab7,text="@Author-Niladri bit",font=my_font)
    l1.grid(row=1,column=0)
    l2=Label(tab7,text="          1729040",font=my_font)
    l2.grid(row=2,column=0)
    l3=Label(tab7,text="          CSCE 1",font=my_font)
    l3.grid(row=3,column=0)

                
    import webbrowser



    new = 1
    url = "https://github.com/niladribit69"

    def openweb():
     webbrowser.open(url,new=new)
     speak('''An undergraduate CS student at KIIT University , Bhubaneswar , India with an interest in Natural Language Processing , Machine learning 
and Data Science.
Objectives are to build skills and gain experience through different avenues to become a change maker and a corporate leader , 
to be enterprising and dynamic in approach.''')

    button7 = Button(tab7,text='GITHUB',command=openweb,width=15,bg='#25d366',fg='#fff')
    button7.grid(row=17,column=0,pady=10,padx=10 )

                    
#VOICE ASSSISTANT
                    #speech processing
#global var
#global var1
    chat_help='''
    1 . FOR CLOSING    -   QUIT
    2 . GET SUMMARY FROM WIKIPEDIA
    3 . OPEN GOOGLE
    4 . OPEN YOUTUBE
    5 . OPEN GITHUB
    6 . OPEN GALLERY
    7 . PLAY MUSIC
    8 . PLAY MOVIE
    9 . KNOW THE TIME
    10 . SEND E-MAIL
    11 . SEND MESSAGE
    12 . ASK //HOW ARE YOU//
    13 . SET ALARM
    14 . ASK //WHO ARE YOU//
    15 . SAY ABOUT ME
    16 . TRANSLATE FROM ENGLISH TO HINDI
    17 . COPY FROM WIKIPEDIA TO TXT 
    18 . KNOW THE WEATHER
    19 . GET GOOGLE MAP DIRECTION'''
    var = StringVar()
    var1 = StringVar()

    def speak(audio):
        engine.say(audio)
        engine.runAndWait()
    

    def wishMe():
        hour=int(datetime.datetime.now().hour)
        if hour>=0 and hour<12:
            var.set("Good morning")
            tab8.update()
            speak("Good Morning!")
        elif hour==12 and hour<18:
            var.set("Good Afternoon")
            tab8.update()
            speak("Good Afternoon!")
        else:
            var.set("Good evening")
            tab8.update()
            speak("Good evening")
        var.set(" I am your assistant sir .")
        tab8.update()
        speak(" I am your assistant sir.")
        var.set(" Please tell me how may i help you")
        tab8.update()
        speak("Please tell me how may i help you")
    
    def takeCommand():
    #It takes microphone input from user and return string output
        r=sr.Recognizer()
        with sr.Microphone() as source:
            var.set("Listening...")
            tab8.update()
        #print("Listening...")
            r.pause_threshold=1
            audio=r.listen(source)
        
        try:
            var.set("Recognizing..")
            tab8.update()
                
        #print("Recognizing..")
            query=r.recognize_google(audio,language='en-in')
        #print(f"User said: {query}\n")
        
        except Exception as e:
        #print("can you repeat sir")
            var.set("Can you repeat sir")
            tab8.update()
            return "None"
        return query
    def sendEmail(to,content):
        server=smtplib.SMTP("smtp.gmail.com",587)
        server.ehlo()
        server.starttls()
        server.login('bitnil155@gmail.com','pxmnmxmjsgtknyad')
        server.sendmail('bitnil155@gmail.com',to,content)
        server.close()
    def play():
        wishMe()
        while True:
            query=takeCommand().lower()

            if 'wikipedia' in query:
                var.set("searching wikipedia")
                tab8.update()
                speak("searching wikipedia...")
                query=query.replace("wikipedia","")
                results=wikipedia.summary(query,sentences=2)
                var.set("According to wikipedia")
                tab8.update()
                speak(" According to wikipedia ")
            
                speak(results)
        
            elif 'open youtube' in query:
                var.set("youtube opened")
                tab8.update()
                speak("youtube opened")
                webbrowser.open("youtube.com")
            
            elif 'open google' in query:
                var.set("google opened")
                tab8.update()
                speak("google opened")
                webbrowser.open("google.com")
            
            elif 'open github' in query:
                var.set("github opened")
                tab8.update()
                speak("github opened")
                webbrowser.open("https://github.com/niladribit69")
          
            elif 'play music' in query:
                var.set("playing music")
                tab8.update()
                speak("playing music")
                music_dir='D:\\steam\\steamapps\\common\\Counter-Strike Global Offensive\\csgo\\sound\\advanced_noscop'
                songs=os.listdir(music_dir)
            #print(songs)
                n=len(songs)
                ran=random.randint(-1, n-1)
                os.startfile(os.path.join(music_dir,songs[ran]))
            
            elif 'open gallery' in query:
                var.set("gallery  opened")
                tab8.update()
                speak("gallery opened")
                gallery_dir='D:\\SteamLibrary\\steamapps\\common\\Counter-Strike Global Offensive\\csgo\\streams'
                gallery=os.listdir(gallery_dir)
                n=len(gallery)
                ran=random.randint(-1, n-1)
                os.startfile(os.path.join(gallery_dir,gallery[ran]))
            
            elif 'play movie' in query:
                var.set("playing movie")
                tab8.update()
                
                movie_dir='D:\\movies\\bose dead or alive'
                movie=os.listdir(movie_dir)
                n=len(movie)
                speak("playing movie")
                os.startfile(os.path.join(movie_dir,movie[n-1]))
            
            elif 'time' in query:
                strTime=datetime.datetime.now().strftime("%H:%M:%S")
                var.set(strTime)
                tab8.update()
                speak(f"the time is {strTime}")
        
            elif "what\'s up" in query or "how are you" in query:
                stmsg=['Just doing my thing!','Iam fine!','Nice!']
                a=random.choice(stmsg)
                var.set(a)
                tab8.update()
                speak(a)
            
            elif 'message' in query:
                try:
                    url = "https://www.fast2sms.com/dev/bulk"
                    var.set("say message")
                    tab8.update()
                    speak("say message")
                    message=takeCommand()
                    var.set("enter contact")
                    tab8.update()
                    speak("enter contact")
                    number=takeCommand()
                    var.set("message loaded")
                    tab8.update()
                    speak("message loaded")
                    fin=''
                    for i in number:
                        if i.isdigit():
                            fin=fin+i
                    payload = 'sender_id=FSTSMS&message='+message+'&language=english&route=p&numbers='+fin
                    headers = {
                    'authorization': "PosGYdt84xmlgj35M12WcE9prJ7XZikCznvSUyKqILDeBRfuQaKjqGSTdzw9Qye0PiXb8xOuCMfD64rN",
                    'Content-Type': "application/x-www-form-urlencoded",
                    'Cache-Control': "no-cache",
                    }
                    response = requests.request("POST", url, data=payload, headers=headers)
                    var.set("message sent successfully")
                    tab8.update()
                    speak("message sent successfully")
                except Exception as e:
                    print(e)
                    var.set("sorry not able to send")
                    tab8.update()
                    speak("sorry not able to send")
            
               

                
            elif 'email' in query:
                try:
                    var.set("what should i say?")
                    tab8.update()
                    speak("What should i say?")
                    content=takeCommand()
                    var.set("enter roll no")
                    tab8.update()
                    speak("enter roll number")
                    roll=takeCommand()
              
                    fin=''
                    for i in roll:
                        if i.isdigit():
                            fin=fin+i
                
                    to=fin+"@kiit.ac.in"
                    to=str(to)
                #print(to)
                    sendEmail(to, content)
                    var.set("email has been sent")
                    tab8.update()
                    speak("Email has been sent")
            
                except Exception as e:
                    print(e)
                    var.set("sorry not able to send")
                    tab8.update()
                    speak("sorry not able to send")     
            elif 'alarm' in query:
                var.set("enter hour")
                tab8.update()
                speak("enter hour")
                alarm_HH = takeCommand()
                var.set("enter minute")
                tab8.update()
                speak("enter minute")
                alarm_MM = takeCommand()

                var.set("You want to wake up at " + alarm_HH + ":" + alarm_MM)
                tab8.update()
                while True:
                        now = time.localtime()
                        if now.tm_hour == int(alarm_HH) and now.tm_min == int(alarm_MM):
            
                            music_dir='D:\\steam\\steamapps\\common\\Counter-Strike Global Offensive\\csgo\\sound\\advanced_noscop'
                            songs=os.listdir(music_dir)
            #print(song)
                            n=len(songs)
                            ran=random.randint(-1, n-1)
                            os.startfile(os.path.join(music_dir,songs[ran]))
                            speak("success")
                            break
                        
                
            elif 'say about me' in query:
                try:
                    f = open("me.txt", "r",encoding='utf-8')
                    about_me=(f.read())
                    speak(about_me)
                    f.close()
                except Exception as e:
                    print(e)
                    speak("Unable")
                
            elif 'who are you' in query:
                try:
                    f = open("jarvis.txt", "r",encoding='utf-8')
                    about_me=(f.read())
                    speak(about_me)
                    f.close()
                except Exception as e:
                    print(e)
                    speak("Unable")
            elif 'copy it' in query:
                try:
                    var.set("what you want to copy")
                    tab8.update()
                    speak("what you want to copy")
                    text1=takeCommand()
                    var.set("Searching wikipedia...")
                    tab8.update()
                    speak("searching wikipedia...")
                    results=wikipedia.summary(text1,sentences=2)
                    var.set("According to wikipedia")
                    tab8.update()
                    speak(" According to wikipedia ")
                    #print(results)
                    speak(results)
            
            #with open('file.txt', 'w') as file:
                #file.write(results)
                    f = open("myfile.txt", "w", encoding='utf-8')
                    f.writelines(results)
                    var.set("pasted the  wikipedia results")
                    tab8.update()
                    speak("pasted the wikipedia results ")
                    f.close()
                except Exception as e:
                    print(e)
                    var.set("Sorry not able to find results")
                    tab8.update()
                    speak("sorry not able to find results")
                
            elif 'translate' in query:
                try:
                    var.set("Say what you want to translate")
                    tab8.update()
                    speak("say what you want to translate")
                    text=takeCommand()
                    from textblob import TextBlob
                    word=TextBlob(text)
                    a=word.translate(to='hi')
                    mytext=str(a)
                    from gtts import gTTS
                    language='hi'
                    output=gTTS(text=mytext,lang=language,slow=False)
                    output.save("output.mp3")
                    os.system("start output.mp3")
                except Exception as e:
                    print(e)
                    var.set("unable to understand")
                    tab8.update()
                    speak("unable to understand")
                    
            elif 'weather' in query:
                try:
                    var.set("say location sir")
                    tab8.update()
                    speak("say location sir")
                    loc=takeCommand()
                    #print(loc)
                    url='https://www.timeanddate.com/weather/india/'+loc
                    from bs4 import BeautifulSoup
                    from urllib.request import urlopen


                    page=urlopen(url)
                    soup=BeautifulSoup(page,'lxml')
                    fetched_text=' '.join(map(lambda p:p.text,  soup.find_all('p')))
                    string1=''
                    for i in fetched_text:
                        if(i=='C'):
                            break
                        else:
                            string1=string1+i
                    from gtts import gTTS
                    language='en'
                    output=gTTS(text=string1,lang=language,slow=False)
                    output.save("output.mp3")
                    os.system("start output.mp3") 
                except Exception as e:
                    print(e)
                    var.set("not able to recognize")
                    tab8.update()
                    speak("NOT ABLE TO RECOGNIZE")
                
            elif 'direction' in query:
                try:
                    var.set("say starting location please")
                    tab8.update()
                    speak("say starting location please")
                    loc1=takeCommand()
                    var.set("say destination")
                    tab8.update()
                    speak("say destination")
                    loc2=takeCommand()
                    url2='https://www.google.com/maps/dir/'+loc1+'/'+loc2
                    import webbrowser
                    var.set("google maps opening")
                    tab8.update()
                    speak("google maps opening")
                    webbrowser.open(url2)
                except Exception as e:
                    print(e)
                    var.set("not able to recognize")
                    tab8.update()
                    speak("NOT ABLE TO RECOGNIZE") 
            elif 'quit' in query:
                    thanks()
                    
            else:
                query=query
                var.set("Searching...")
                tab8.update()
                speak('Searching...')
                try:
                    results=wikipedia.summary(query,sentences=2)
                    var.set("According to wikipedia")
                    tab8.update()
                    speak(" According to wikipedia ")
                    print(results)
                    speak(results)
                except:
                    print("please type sir")
                

    label2 = Label(tab8, textvariable = var1 )
    label2.config(font=("Courier", 20))
    label2.grid(row=3,column=0,pady=10,padx=10 )
    var1.set('User Said:')


    label1 = Label(tab8, textvariable = var )
    label1.config(font=("Courier", 20))
    label1.grid(row=4,column=0,pady=10,padx=10 )
    var.set('Welcome')



    btn1 = Button(tab8,text = 'PLAY',width = 20,command = play, bg = '#5C85FB',relief=RAISED)
    btn1.config(font=("Courier", 12))
    btn1.grid(row=7,column=0,pady=10,padx=10 )

    btn2 = Button(tab8,text = 'EXIT',width = 20, command = thanks, bg = '#5C85FB',relief=RAISED)
    btn2.config(font=("Courier", 12))
    btn2.grid(row=8,column=0,pady=10,padx=10 )
    
    display=ScrolledText(tab8,height=10,width=60)
    display.grid(row=10,column=0,padx=5,pady=5) 
    display.insert('insert', chat_help)
    

       

#exit
    button9 = Button(tab9,text='EXIT',command=thanks,width=15,bg='#25d366',fg='#fff')
    button9.grid(row=10,column=0,pady=10,padx=10)
 
# Designing popup for login invalid password
 
def password_not_recognised():
     global password_not_recog_screen
     password_not_recog_screen = Toplevel(login_screen)
     password_not_recog_screen.title("Success")
     password_not_recog_screen.geometry("150x100")
     Label(password_not_recog_screen, text="Invalid Password ").pack()
     Button(password_not_recog_screen, text="OK", command=delete_password_not_recognised).pack()
 
# Designing popup for user not found
 
def user_not_found():
    global user_not_found_screen
    user_not_found_screen = Toplevel(login_screen)
    user_not_found_screen.title("Success")
    user_not_found_screen.geometry("150x100")
    Label(user_not_found_screen, text="User Not Found").pack()
    Button(user_not_found_screen, text="OK", command=delete_user_not_found_screen).pack()
 
# Deleting popups
 

 
 
def delete_password_not_recognised():
    password_not_recog_screen.destroy()
 
 
def delete_user_not_found_screen():
    user_not_found_screen.destroy()
 
 
# Designing Main(first) window
 
def main_account_screen():
    global main_screen
    main_screen = Tk()
    main_screen.geometry("300x250")
    main_screen.title("Account Login")
    Label(text="Select Your Choice", bg="blue", width="300", height="2", font=("Calibri", 13)).pack()
    Label(text="").pack()
    Button(text="Login", height="2", width="30", command = login).pack()
    Label(text="").pack()
    Button(text="Register", height="2", width="30", command=register).pack()
    
 
    main_screen.mainloop()
 
 
main_account_screen()
